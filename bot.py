import random

import requests
import telebot
from telebot import types

from buttons import (choice_key, city_info_key, create_keyboard, geo_key,
                     menu_key, vbord_key, verno_key, weather_clothes_key,
                     wheather_key)
from config import DEVELOPER, TOKEN
from database import (add_message, create_database, select_city, select_token,
                      select_translate, update_city, update_token,
                      update_translate)
from fhoto_city import get_place
from geoloc import i_know_where_you_live, you_know_where_you_live
from Gpt import (yandex_gpt_attractions_city,
                 yandex_gpt_beautiful_presentation_of_information,
                 yandex_gpt_brief_retelling, yandex_gpt_clothes,
                 yandex_gpt_interesting_facts, yandex_gpt_nature_features)
from log import logger
from translate import translater
from Weather_function import (getting_the_weather,
                              getting_the_weather_five_day,
                              getting_the_weather_tomorrow)

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        base = create_database()
        if not base:
            create_database()
            add_message(user_id)
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º ü§ñ\n'
                                              '–Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥!</b>', reply_markup=verno_key(),
                             parse_mode='HTML')
            return
        bot.send_message(message.chat.id, f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥üëã\n\n</b>'
                                          '<i>–Ø –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç,\n'
                                          '–∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤\n'
                                          '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –≤ \n'
                                          '–≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö‚úàÔ∏è. \n\n'
                                          '<b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?</b>\n'
                                          '–ü–æ–º–æ–≥—É –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –≤—Å—é \n'
                                          '–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é \n'
                                          '–≥–æ—Ä–æ–¥–∞, –∫—É–¥–∞ –¥–µ—Ä–∂–∏—Ç–µ –ø—É—Ç—å,\n'
                                          '–∏ –¥–∞–∂–µ –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ \n'
                                          '–æ–¥–µ—Ç—å—Å—èüëñ –ø–æ –ø–æ–≥–æ–¥–µ.</i>\n\n'
                                          '<b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ YaGPT3üîÆ,\n'
                                          '—Å–∞–º–æ–π –Ω–æ–≤–µ–π—à–µ–π –º–æ–¥–µ–ª–∏ —É\n'
                                          '<u>–Ø–Ω–¥–µ–∫—Å–∞</u>.</b>\n\n'
                                          '<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å - /help</b>', parse_mode='HTML', reply_markup=menu_key())
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–†–∞–∑–¥–µ–ª –ø–æ–≥–æ–¥—ã‚õÖÔ∏è')
def weather(message):
    try:
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é \n'
                                          '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ \n'
                                          '–ø–æ–ª—É—á–∏—Ç—å –æ –ø–æ–≥–æ–¥–µ:</b>', reply_markup=wheather_key(), parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùó', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–†–∞–∑–¥–µ–ª –æ –≥–æ—Ä–æ–¥–µüåÜ')
def city_info(message):
    try:
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é \n'
                                          '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ \n'
                                          '–ø–æ–ª—É—á–∏—Ç—å –æ –≥–æ—Ä–æ–¥–µ:</b>', reply_markup=city_info_key(), parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–§–æ—Ç–æüì∏')
def photo_city_user_message(message):
    try:
        user_id = message.from_user.id
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        photo = get_place(city.lower())
        if photo in ['–¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç', '—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫']:
            bot.send_message(message.chat.id, '–î–ª—è —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ\n'
                                              '–Ω–∞—à–ª–æ—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, \n'
                                              '–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º\n'
                                              '—Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤. /city')
            return
        name, description, address, img_source = photo
        img_data = requests.get(img_source).content
        with open('image_name.jpg', 'wb') as handler:
            handler.write(img_data)
        with open('image_name.jpg', 'rb') as file:
            f = file.read()
        bot.send_photo(message.chat.id, photo=f, caption=f'<b>–ò–º—è:</b> <i>{name}</i>\n\n'
                                                         f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{description}</i>\n\n'
                                                         f'<b>–ê–¥—Ä–µ—Å:</b> <i>{address}</i>', parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å‚úè')
def a_brief_retelling_message(message):
    try:
        bot.send_message(message.chat.id, '<b>–í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–µ–∫—Å—Ç:</b>\n\n'
                                          '<b><u>–î–ª—è —á–µ–≥–æ —ç—Ç–æ –Ω—É–∂–Ω–æ?</u></b>\n'
                                          '<i>–ù–∞–ø—Ä–∏–º–µ—Ä –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ,\n'
                                          '–µ—Å—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ \n'
                                          '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ, –µ—Å–ª–∏ \n'
                                          '–≤–∞–º –Ω–µ–∫–æ–≥–¥–∞ –≤—Å–µ —ç—Ç–æ —á–∏—Ç–∞—Ç—å, \n'
                                          '–Ω–∞ –ø–æ–º–æ—â—å –ø—Ä–∏–¥–µ—Ç –∫—Ä–∞—Ç–∫–∏–π \n'
                                          '–ø–µ—Ä–µ—Å–∫–∞–∑,–ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ \n'
                                          '–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.</i>', reply_markup=types.ReplyKeyboardRemove(),
                         parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)

    def text_user(message):
        try:
            message_user = bot.send_message(message.chat.id, '‚è≥')
            user_id = message.from_user.id
            text = message.text
            user_token = select_token(user_id)
            if user_token <= 0:
                bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                                  '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                                  '/contacts',
                                 reply_markup=menu_key())
                return
            text_gpt = yandex_gpt_brief_retelling(text)
            bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                                  text=text_gpt, parse_mode='markdown')
            bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...', reply_markup=menu_key())
            use_token = len(text_gpt)
            user_token -= use_token
            update_token(user_id, user_token)
        except Exception as e:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
            logger.error(e)

    bot.register_next_step_handler(message, text_user)


@bot.message_handler(func=lambda message: message.text in ['–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥üåç', '–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥üåç'])
def choice_city_message(message):
    try:
        user_id = message.from_user.id
        base = create_database()
        if not base:
            create_database()
            add_message(user_id)
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º\n'
                                          '–≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥:</b>', reply_markup=vbord_key(), parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥üåç')
def city_text_message(message):
    try:
        bot.send_message(message.chat.id, '<b>–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n'
                                          '<i>–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ \n'
                                          '–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!</i>\n', parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)

    def city_text_to_city(message):
        try:
            user_id = message.from_user.id
            city = message.text
            location = you_know_where_you_live(city)
            bot.send_message(message.chat.id, f'<b>–í–∞—à –≥–æ—Ä–æ–¥:</b> \n<i>{location}</i>\n\n'
                                              f'<b>–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã–µ?</b>', reply_markup=choice_key(), parse_mode='HTML')
            update_city(city, user_id)
        except Exception as e:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
            logger.error(e)

    bot.register_next_step_handler(message, city_text_to_city)


@bot.callback_query_handler(func=lambda callback: callback.data == 'Yes')
def city_yes(callback):
    try:
        user_id = callback.message.chat.id
        city = select_city(user_id)
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, f'<b>–í–∞—à –≥–æ—Ä–æ–¥: {city} </b>\n\n'
                                                   f'<i>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ</i>', reply_markup=menu_key(),
                         parse_mode='HTML')
    except Exception as e:
        bot.send_message(callback.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.callback_query_handler(func=lambda callback: callback.data == 'No')
def city_no(callback):
    try:
        bot.answer_callback_query(callback.id)
        user_id = callback.message.chat.id
        update_city('', user_id)
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(callback.message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=vbord_key())
            bot.register_next_step_handler(callback.message, choice_city_message)
            return
        bot.send_message(callback.message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=menu_key())
    except Exception as e:
        bot.send_message(callback.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫üá¨üáß')
def translate_fun_message(message):
    try:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è\n'
                                          '–ø–µ—Ä–µ–≤–æ–¥–∞:', reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)

    def translate_text(message):
        try:
            text = message.text
            user_id = message.from_user.id
            update_translate(text, user_id)
            bot.send_message(message.chat.id, '<b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:</b>\n'
                                              'üá∑üá∫ - –†–æ—Å—Å–∏—è\n'
                                              'üá¨üáß - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\n'
                                              'üáßüáæ - –ë–µ–ª–∞—Ä—É—Å—å\n'
                                              'üá©üá™ - –ì–µ—Ä–º–∞–Ω–∏—è\n'
                                              'üá™üá∏ - –ò—Å–ø–∞–Ω–∏—è\n'
                                              'üá™üá™ - –≠—Å—Ç–æ–Ω–∏—è\n'
                                              'üá´üá∑ - –§—Ä–∞–Ω—Ü–∏—è\n'
                                              'üáØüáµ - –Ø–ø–æ–Ω–∏—è\n'
                                              'üáµüáπ - –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è\n'
                                              'üá∑üá¥ - –†—É–º—ã–Ω–∏—è\n'
                                              'üá∞üáø - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n',
                             reply_markup=create_keyboard(
                                 ['üá∑üá∫', 'üá¨üáß', 'üáßüáæ', 'üá©üá™', 'üá™üá∏', 'üá™üá™', 'üá´üá∑', 'üáØüáµ', 'üáµüáπ', 'üá∑üá¥', 'üá∞üáø']), parse_mode='html')
        except Exception as e:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
            logger.error(e)

    bot.register_next_step_handler(message, translate_text)


@bot.message_handler(
    func=lambda message: message.text in ['üá∑üá∫', 'üá®üá≥', 'üá¨üáß', 'üáßüáæ', 'üá©üá™', 'üá™üá∏', 'üá™üá™', 'üá´üá∑', 'üáØüáµ', 'üáµüáπ', 'üá∑üá¥', 'üá∞üáø'])
def translate_lang_message(message):
    try:
        lang = message.text
        user_id = message.from_user.id
        e = select_translate(user_id)
        text = translater(e, lang)
        bot.send_message(message.chat.id, f'<b>–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:</b> \n<i>{text}</i>\n\n'
                                          f'<b>–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n'
                                          f'<i>{e}</i>', reply_markup=menu_key(), parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µüó∫')
def city_geo_message(message):
    try:
        bot.send_message(message.chat.id, '<b>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é\n'
                                          '–≥–æ—Ä–æ–¥–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–π\n'
                                          '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n\n'
                                          '<i>1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–π\n'
                                          '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ <b>—Å–∫—Ä–µ–ø–∫—Éüìé</b>,\n'
                                          '–≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–µ–Ω—é.\n'
                                          '2. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ \n'
                                          '<b>"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è"</b>\n'
                                          '3. –ü–æ—è–≤–∏—Ç—Å—è –∫–∞—Ä—Ç–∞, –Ω–∞ –Ω–µ–π\n'
                                          '–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ—Ç –≥–æ—Ä–æ–¥,\n'
                                          '–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å.</i>\n\n'
                                          '<u>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</u>\n'
                                          '<i>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ\n'
                                          '—Å–≤–æ–π –≥–æ—Ä–æ–¥, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ\n'
                                          '–Ω–∏–∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ\n'
                                          '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n'
                                          '<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—éüìç</b></i>\n\n'
                                          '<b>–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å\n'
                                          '–≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è‚ùóÔ∏è</b>\n', reply_markup=geo_key(),
                         parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)

    def city_geo_to_city(message):
        try:
            user_id = message.from_user.id
            Location = message.location
            if not Location:
                bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å.\n'
                                                  '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ', reply_markup=verno_key())
                return
            lat = Location.latitude
            long = Location.longitude
            city, country = i_know_where_you_live(lat, long)
            update_city(city, user_id)
            bot.send_message(message.chat.id, f'<b>–í–∞—à –≥–æ—Ä–æ–¥: {city}, {country} </b>\n\n'
                                              f'<i>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ</i>', reply_markup=menu_key(), parse_mode='HTML')
        except Exception as e:
            bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
            logger.error(e)

    bot.register_next_step_handler(message, city_geo_to_city)


@bot.message_handler(func=lambda message: message.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞‚õà')
def weather_tomorrow_message(message):
    try:
        message_user = bot.send_message(message.chat.id, '‚è≥')
        user_id = message.from_user.id
        city = select_city(user_id)
        user_token = select_token(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        if user_token <= 0:
            bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                              '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                              '"/contacts"\n',
                             reply_markup=menu_key())
            return
        tomorrow = getting_the_weather_tomorrow(city)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=tomorrow, parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ù–∞ 5 –¥–Ω–µ–πüîÆ')
def week_weather_message(message):
    message_user = bot.send_message(message.chat.id, '‚è≥')
    user_id = message.from_user.id
    city = select_city(user_id)
    if city is None or city == '':
        bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
        return
    week = getting_the_weather_five_day(city)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                          text=week, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å‚õ±')
def weather_message(message):
    try:
        message_user = bot.send_message(message.chat.id, '‚è≥')
        user_id = message.from_user.id
        city = select_city(user_id)
        user_token = select_token(user_id)
        if user_token <= 0:
            bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                              '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                              '"/contacts"\n',
                             reply_markup=menu_key())
            return
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        weather = getting_the_weather(city)
        weather_gpt = yandex_gpt_beautiful_presentation_of_information(city, weather[0], weather[1], weather[2],
                                                                       weather[3])
        use_token = len(weather_gpt)
        user_token -= use_token
        update_token(user_id, user_token)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=weather_gpt, parse_mode='markdown', reply_markup=weather_clothes_key())
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.callback_query_handler(func=lambda callback: callback.data == 'clothes')
def clothes_callback(callback):
    try:
        message_user = bot.send_message(callback.message.chat.id, '‚è≥')
        bot.answer_callback_query(callback.id)
        user_id = callback.message.chat.id
        city = select_city(user_id)
        user_token = select_token(user_id)
        if user_token <= 0:
            bot.send_message(callback.message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                                       '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                                       '"/contacts"\n',
                             reply_markup=menu_key())
            return
        if city is None or city == '':
            bot.send_message(callback.message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        wheather = getting_the_weather(city)
        clothes = yandex_gpt_clothes(wheather[0], wheather[1], wheather[2], wheather[3])
        use_token = len(clothes)
        user_token -= use_token
        update_token(user_id, user_token)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=message_user.message_id,
                              text=clothes, parse_mode='markdown')
    except Exception as e:
        bot.send_message(callback.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏—Ä–æ–¥–∞üèû')
def forest_message(message):
    try:
        message_user = bot.send_message(message.chat.id, '‚è≥')
        user_id = message.from_user.id
        city = select_city(user_id)
        user_token = select_token(user_id)
        if user_token <= 0:
            bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                              '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                              '"/contacts"\n',
                             reply_markup=menu_key())
            return
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        forest = yandex_gpt_nature_features(city)
        use_token = len(forest)
        use_token -= use_token
        update_token(user_id, user_token)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=forest, parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–§–∞–∫—Ç—ãüí°')
def facts_message(message):
    try:
        message_user = bot.send_message(message.chat.id, '‚è≥')
        user_id = message.from_user.id
        city = select_city(user_id)
        user_token = select_token(user_id)
        if user_token <= 0:
            bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                              '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                              '"/contacts"\n',
                             reply_markup=menu_key())
            return
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        facts = yandex_gpt_interesting_facts(city)
        use_token = len(facts)
        user_token -= use_token
        update_token(user_id, user_token)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=facts, parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏üó∫')
def attractions_message(message):
    try:
        message_user = bot.send_message(message.chat.id, '‚è≥')
        user_id = message.from_user.id
        city = select_city(user_id)
        user_token = select_token(user_id)
        if user_token <= 0:
            bot.send_message(message.chat.id, '–¢–æ–∫–µ–Ω—ã –ø–æ—Ç—Ä–∞—á–µ–Ω—ã‚ùóÔ∏è\n'
                                              '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º\n'
                                              '"/contacts"\n',
                             reply_markup=menu_key())
            return
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        attractions = yandex_gpt_attractions_city(city)
        use_token = len(attractions)
        user_token -= use_token
        update_token(user_id, user_token)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=attractions, parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())


@bot.message_handler(commands=['contacts'])
def contacts_commands(message):
    try:
        random_develop = random.choice(DEVELOPER)
        bot.send_message(message.chat.id, f'–°–≤—è–∂–∏—Å—å —Å [—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º]({random_develop})',
                         parse_mode='Markdown')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ú–µ–Ω—é‚Ü©Ô∏è')
def back_menu_message(message):
    try:
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...', reply_markup=menu_key())
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(commands=['help'])
def help_commands(message):
    try:
        bot.send_message(message.chat.id, f'<b>/start</b> - <i>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</i>\n'
                                          f'<b>/contacts</b> - <i>–°–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏</i>\n'
                                          f'<b>/help</b> - <i>–ü–æ–º–æ—â—å</i>\n'
                                          f'<b>/city</b> - <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</i>\n'
                                          f'<b>/manual</b> - <i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±–æ—Ç–∞</i>', reply_markup=menu_key(),
                         parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(commands=['log'])
def log_commands(message):
    try:
        with open("logs.log", "rb") as f:
            bot.send_document(message.chat.id, f)
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(commands=['city'])
def log_commands(message):
    try:
        bot.send_message(message.chat.id, '<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:</b>\n'
                                          '<i>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>\n'
                                          '<i>–ú–æ—Å–∫–≤–∞</i>\n'
                                          '<i>–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</i>\n'
                                          '<i>–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</i>\n'
                                          '<i>–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥</i>\n'
                                          '<i>–ö–∞–∑–∞–Ω—å</i>\n'
                                          '<i>–í—ã–±–æ—Ä–≥</i>\n'
                                          '<i>–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫</i>\n', parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(commands=['manual'])
def manual_commands(message):
    try:
        message_text = (
            "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n\n"
            "<b>–†–∞–∑–¥–µ–ª –æ –≥–æ—Ä–æ–¥–µüåÜ:</b>\n<i>–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ, –≤–∫–ª—é—á–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –ø—Ä–∏—Ä–æ–¥—É.</i>\n\n"
            "<b>–†–∞–∑–¥–µ–ª –ø–æ–≥–æ–¥—ã‚õÖÔ∏è:</b>\n<i>–£–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –Ω–∞ –ø—è—Ç—å –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥. –ü–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ–¥–µ–∂–¥–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –¥–æ–∂–¥—å!</i>\n\n"
            "<b>–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫üá¨üáß:</b>\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏.</i>\n\n"
            "<b>–ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å‚úè:</b>\n<i>–ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.</i>\n\n"
            "<b>–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥üåç:</b>\n<i>–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–∏—Å–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.</i>\n\n"
            "<b>–§–æ—Ç–æüì∏:</b>\n<i>–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.</i>\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>"
        )
        bot.send_message(message.chat.id, message_text, parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: True)
def unknown_message(message):
    user_id = message.from_user.id
    base = create_database()
    city = select_city(user_id)
    if not base:
        create_database()
        add_message(user_id)
    if city == '':
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!')
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=verno_key())
        return
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.', reply_markup=menu_key())


bot.polling(none_stop=True)
