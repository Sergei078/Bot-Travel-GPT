from config import TOKEN
import telebot
import random
from buttons import menu_key, vbord_key, geo_key, verno_key, choice_key
from Weather_function import getting_the_weather
from geoloc import i_know_where_you_live, you_know_where_you_live
from Gpt import yandex_gpt_beautiful_presentation_of_information, yandex_gpt_clothes, yandex_gpt_nature_features
import logging
from database import create_database, add_message, update_city, select_city

logging.basicConfig(filename='logConfig.log', encoding='utf-8', level=logging.WARNING,
                    format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s")
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)

developer = ["https://t.me/ild1kpy", "https://t.me/ArtemSav5", "https://t.me/SergeiDobrynkin07",
             "https://t.me/Programist337)", "https://t.me/matvejkazxc"]


@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        base = create_database()
        if not base:
            create_database()
            add_message(user_id)
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '<b>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º ü§ñ\n'
                                              '–Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥!</b>', reply_markup=verno_key(),
                             parse_mode='HTML')
        bot.send_message(message.chat.id, f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥üëã\n\n</b>'
                                          '<i>–Ø –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç,\n'
                                          '–∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤\n'
                                          '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –≤ \n'
                                          '–≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö‚úàÔ∏è. \n\n'
                                          '<b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?</b>\n'
                                          '–ü–æ–º–æ–≥—É –≤–∞–º —Å–æ–±—Ä–∞—Ç—å –≤—Å—é \n'
                                          '–Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é \n'
                                          '–≥–æ—Ä–æ–¥–∞, –∫—É–¥–∞ –¥–µ—Ä–∂–∏—Ç–µ –ø—É—Ç—å,\n'
                                          '–∏ –¥–∞–∂–µ –ø–æ–¥—Å–∫–∞–∂—É –∫–∞–∫ \n'
                                          '–æ–¥–µ—Ç—å—Å—èüëñ –ø–æ –ø–æ–≥–æ–¥–µ.</i>\n\n'
                                          '<b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ YaGPT3üîÆ,\n'
                                          '—Å–∞–º–æ–π –Ω–æ–≤–µ–π—à–µ–π –º–æ–¥–µ–ª–∏ —É\n'
                                          '<u>–Ø–Ω–¥–µ–∫—Å–∞</u>.</b>\n\n'
                                          '<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å - /help</b>', parse_mode='HTML',
                         reply_markup=menu_key())
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text in ['–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥üåç', '–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥üåç'])
def choise_city(message):
    try:
        user_id = message.from_user.id
        base = create_database()
        if not base:
            create_database()
            add_message(user_id)
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º\n'
                                          '–≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥:</b>', reply_markup=vbord_key(), parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Ä–æ–¥üåç')
def city_text(message):
    try:
        bot.send_message(message.chat.id, '<b>–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n'
                                          '<i>–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ \n'
                                          '–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!</i>\n', parse_mode='HTML')
        bot.register_next_step_handler(message, city_text_to_city)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


def city_text_to_city(message):
    try:
        user_id = message.from_user.id
        print(user_id)
        city = message.text
        location = you_know_where_you_live(city)
        bot.send_message(message.chat.id, f'<b>–í–∞—à –≥–æ—Ä–æ–¥:</b> \n<i>{location}</i>\n\n'
                                          f'<b>–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã–µ?</b>', reply_markup=choice_key(), parse_mode='HTML')
        update_city(city, user_id)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.callback_query_handler(func=lambda callback: callback.data == 'Yes')
def city_yes(callback):
    try:
        user_id = callback.message.chat.id
        city = select_city(user_id)
        bot.answer_callback_query(callback.id)
        bot.send_message(callback.message.chat.id, f'<b>–í–∞—à –≥–æ—Ä–æ–¥: {city} </b>\n\n'
                                                   f'<i>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ</i>', reply_markup=menu_key(),
                         parse_mode='HTML')
    except Exception as e:
        bot.send_message(callback.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.callback_query_handler(func=lambda callback: callback.data == 'No')
def city_no(callback):
    try:
        bot.answer_callback_query(callback.id)
        user_id = callback.message.chat.id
        update_city('', user_id)
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(callback.message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=vbord_key())
            bot.register_next_step_handler(callback.message, choise_city)
            return
        bot.send_message(callback.message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=menu_key())
    except Exception as e:
        bot.send_message(callback.message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µüó∫')
def city_geo(message):
    try:
        bot.send_message(message.chat.id, '<b>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é\n'
                                          '–≥–æ—Ä–æ–¥–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–π\n'
                                          '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n\n'
                                          '<i>1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–π\n'
                                          '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ <b>—Å–∫—Ä–µ–ø–∫—Éüìé</b>,\n'
                                          '–≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–µ–Ω—é.\n'
                                          '2. –í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ \n'
                                          '<b>"–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è"</b>\n'
                                          '3. –ü–æ—è–≤–∏—Ç—Å—è –∫–∞—Ä—Ç–∞, –Ω–∞ –Ω–µ–π\n'
                                          '–Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ—Ç –≥–æ—Ä–æ–¥,\n'
                                          '–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å.</i>\n\n'
                                          '<u>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</u>\n'
                                          '<i>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ\n'
                                          '—Å–≤–æ–π –≥–æ—Ä–æ–¥, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ\n'
                                          '–Ω–∏–∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ\n'
                                          '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n'
                                          '<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—éüìç</b></i>\n\n'
                                          '<b>–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å\n'
                                          '–≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è‚ùóÔ∏è</b>\n', reply_markup=geo_key(),
                         parse_mode='HTML')
        bot.register_next_step_handler(message, city_geo_to_city)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


def city_geo_to_city(message):
    try:
        user_id = message.from_user.id
        Location = message.location
        if not Location:
            bot.send_message(message.chat.id, '–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å.\n'
                                              '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –Ω–∞—á–∞–ª–æ', reply_markup=verno_key())
            return
        lat = Location.latitude
        long = Location.longitude
        city, country = i_know_where_you_live(lat, long)
        update_city(city, user_id)
        bot.send_message(message.chat.id, f'<b>–í–∞—à –≥–æ—Ä–æ–¥: {city}, {country} </b>\n\n'
                                          f'<i>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ</i>', reply_markup=menu_key(), parse_mode='HTML')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞üå©')
def wheather(message):
    try:
        message_user = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...')
        user_id = message.from_user.id
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        wheather = getting_the_weather(city)
        weather_gpt = yandex_gpt_beautiful_presentation_of_information(city, wheather[0], wheather[1], wheather[2],
                                                                       wheather[3])
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=weather_gpt, parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–°–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µüëï')
def clothes(message):
    try:
        message_user = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...')
        user_id = message.from_user.id
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        wheather = getting_the_weather(city)
        clothes = yandex_gpt_clothes(wheather[0], wheather[1], wheather[2], wheather[3])
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=clothes, parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(func=lambda message: message.text == '–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ä–æ–¥—ãüèû')
def forest(message):
    try:
        message_user = bot.send_message(message.chat.id, '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...')
        user_id = message.from_user.id
        city = select_city(user_id)
        if city is None or city == '':
            bot.send_message(message.chat.id, '–ù–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=menu_key())
            return
        forest = yandex_gpt_nature_features(city)
        bot.edit_message_text(chat_id=message.chat.id, message_id=message_user.message_id,
                              text=forest, parse_mode='markdown')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(commands=['contacts'])
def contacts(message):
    try:
        random_develop = random.choice(developer)
        bot.send_message(message.chat.id, f'–°–≤—è–∂–∏—Å—å —Å [—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º]({random_develop})',
                         parse_mode='Markdown', )
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(commands=['help'])
def help(message):
    try:
        bot.send_message(message.chat.id, f'<b>/start</b> - <i>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞</i>\n'
                                          f'<b>/contacts</b> - <i>–°–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è–º–∏</i>\n'
                                          f'<b>/help</b> - <i>–ü–æ–º–æ—â—å</i>', reply_markup=menu_key(), parse_mode='html')
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=verno_key())
        logger.error(e)


@bot.message_handler(commands=['log'])
def log(message):
    try:
        with open("logs.log", "rb") as f:
            bot.send_document(message.chat.id, f)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞‚ùóÔ∏è{e}', reply_markup=menu_key())
        logger.error(e)


@bot.message_handler(func=lambda message: True)
def unknown(message):
    user_id = message.from_user.id
    base = create_database()
    city = select_city(user_id)
    if not base:
        create_database()
        add_message(user_id)
    if city == '':
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏!')
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥‚ùóÔ∏è', reply_markup=verno_key())
        return
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.', reply_markup=menu_key())
    bot.register_next_step_handler(message, start)


bot.polling(none_stop=True)
